//
//  Photo.swift
//  ModelGen
//
//  Generated by [ModelGen](https://github.com/hebertialmeida/ModelGen)
//  Copyright Â© 2020 ModelGen. All rights reserved.
//

import Foundation
import RocketData

public struct Photo: Codable, Equatable {
    public let color: String
    public let createdAt: Date
    public let description: String?
    public let height: Int
    public let id: String
    public let likedByUser: Bool
    public let likes: Int
    public let links: PhotoLinks
    public let updatedAt: Date
    public let urls: PhotoUrls
    public let user: User
    public let width: Int

    private enum CodingKeys: String, CodingKey {
        case color
        case createdAt = "created_at" 
        case description
        case height
        case id
        case likedByUser = "liked_by_user" 
        case likes
        case links
        case updatedAt = "updated_at" 
        case urls
        case user
        case width
    }
}

// MARK: - Equatable

public func == (lhs: Photo, rhs: Photo) -> Bool {
    guard lhs.color == rhs.color else { return false }
    guard lhs.createdAt == rhs.createdAt else { return false }
    guard lhs.description == rhs.description else { return false }
    guard lhs.height == rhs.height else { return false }
    guard lhs.id == rhs.id else { return false }
    guard lhs.likedByUser == rhs.likedByUser else { return false }
    guard lhs.likes == rhs.likes else { return false }
    guard lhs.links == rhs.links else { return false }
    guard lhs.updatedAt == rhs.updatedAt else { return false }
    guard lhs.urls == rhs.urls else { return false }
    guard lhs.user == rhs.user else { return false }
    guard lhs.width == rhs.width else { return false }
    return true
}

// MARK: - Identifiable

extension Photo: Identifiable { }

// MARK: - RocketData

extension Photo: Model {
    public func map(_ transform: (Model) -> Model?) -> Photo? {
        guard let links = transform(self.links) as? PhotoLinks else { return nil }
        guard let urls = transform(self.urls) as? PhotoUrls else { return nil }
        guard let user = transform(self.user) as? User else { return nil }
        return Photo(color: color, createdAt: createdAt, description: description, height: height, id: id, likedByUser: likedByUser, likes: likes, links: links, updatedAt: updatedAt, urls: urls, user: user, width: width)
    }

    public func forEach(_ visit: (Model) -> Void) {
        visit(links)
        visit(urls)
        visit(user)
    }
}