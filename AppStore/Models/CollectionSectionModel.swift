//
//  CollectionSectionModel.swift
//  ModelGen
//
//  Generated by [ModelGen](https://github.com/hebertialmeida/ModelGen)
//  Copyright Â© 2020 ModelGen. All rights reserved.
//

import Foundation
import RocketData

public struct CollectionSectionModel: Codable, Equatable {
    public let collections: [Collection]
    public let date: Date
    public let id: String

    private enum CodingKeys: String, CodingKey {
        case collections
        case date
        case id
    }
}

// MARK: - Equatable

public func == (lhs: CollectionSectionModel, rhs: CollectionSectionModel) -> Bool {
    guard lhs.collections == rhs.collections else { return false }
    guard lhs.date == rhs.date else { return false }
    guard lhs.id == rhs.id else { return false }
    return true
}

// MARK: - Identifiable

extension CollectionSectionModel: Identifiable { }

// MARK: - RocketData

extension CollectionSectionModel: Model {
    public func map(_ transform: (Model) -> Model?) -> CollectionSectionModel? {
        let collections = self.collections.compactMap { transform($0) as? Collection }
        return CollectionSectionModel(collections: collections, date: date, id: id)
    }

    public func forEach(_ visit: (Model) -> Void) {
        collections.forEach(visit)
    }
}