//
//  {{ spec.title }}.swift
//  ModelGen
//
//  Generated by [ModelGen](https://github.com/hebertialmeida/ModelGen)
//  Copyright Â© {% now "yyyy" %} ModelGen. All rights reserved.
//

import Foundation
import IGListKit

{% if spec.description %}
/// {{ spec.description }}
{% endif %}
final class {{ spec.title }}: NSObject, Codable, Equatable {

    // MARK: Instance Variables

{% for property in spec.properties %}
{% if property.doc %}
    /**
     {{ property.doc }}
     */
{% endif %}
    public let {{ property.name }}: {{ property.type }}{% if not property.required %}?{% endif %}
{% endfor %}

    private enum CodingKeys: String, CodingKey {
{% for property in spec.properties %}
        case {{ property.name }}{% if property.name != property.key %} = "{{ property.key }}" {% endif %}
{% endfor %}
    }
}

// MARK: - Equatable

func == (lhs: {{spec.title}}, rhs: {{spec.title}}) -> Bool {
{% for property in spec.properties %}
    guard lhs.{{property.name}} == rhs.{{property.name}} else { return false }
{% endfor %}
    return true
}

// MARK: - ListDiffabel

extension {{ spec.title }}: ListDiffable {

    func diffIdentifier() -> NSObjectProtocol {
{% if spec.identifier %}
{% for property in spec.properties %}
{% if property.key == spec.identifier %}
        return {{ property.name }} as NSObjectProtocol
{% endif %}
{% endfor %}
{% else %}
        guard let object = self as? NSObjectProtocol else { fatalError() }
        return object
{% endif %}
    }

    func isEqual(toDiffableObject object: ListDiffable?) -> Bool {
        guard let object = object as? {{ spec.title }} else { return false }

{% for property in spec.properties %}
        guard {{property.name}} == object.{{property.name}} else { return false }
{% endfor %}
        return true
    }
}